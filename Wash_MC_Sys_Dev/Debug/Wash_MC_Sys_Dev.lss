
Wash_MC_Sys_Dev.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000038  00000000  00000000  000002a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000ee  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000aa  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000010d  00000000  00000000  00000472  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000094  00000000  00000000  00000580  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000149  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000f9  00000000  00000000  0000075d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  00000856  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  68:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  6c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  70:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  74:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  78:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  7c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  80:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  84:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  88:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  8c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  90:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  94:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  98:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  9c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  ac:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  b0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  b4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  b8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  bc:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  c0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  c4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  c8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  cc:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  d0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  d4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  d8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  dc:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  e0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	0e 94 80 00 	call	0x100	; 0x100 <main>
  f8:	0c 94 0d 01 	jmp	0x21a	; 0x21a <_exit>

000000fc <__bad_interrupt>:
  fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <main>:
//Delay function
void delay(int);

//Main function, program start
int main(void)
{
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
	init_port();		//Initialize ports
 108:	0e 94 91 00 	call	0x122	; 0x122 <init_port>
	init_timer0();		//Initialize timer0
 10c:	0e 94 b6 00 	call	0x16c	; 0x16c <init_timer0>
	
	delay(5000);
 110:	88 e8       	ldi	r24, 0x88	; 136
 112:	93 e1       	ldi	r25, 0x13	; 19
 114:	0e 94 ce 00 	call	0x19c	; 0x19c <delay>
	PORTB = 0x00;
 118:	85 e2       	ldi	r24, 0x25	; 37
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	fc 01       	movw	r30, r24
 11e:	10 82       	st	Z, r1
	
	//Super loop
    while(1)
    {
        
    }
 120:	ff cf       	rjmp	.-2      	; 0x120 <main+0x20>

00000122 <init_port>:
}

void init_port(void)
{
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
	This function is used to initialize the ports the
	microcontroller needs.  In this case B0-3, C0-4,
	D0-3 all need to be configured.
	*/
	
	DDRB = 0xFF;	//Configure port B as OUTPUT
 12a:	84 e2       	ldi	r24, 0x24	; 36
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	fc 01       	movw	r30, r24
 132:	20 83       	st	Z, r18
	PORTB = 0xFF;	//Configure port B as LOW
 134:	85 e2       	ldi	r24, 0x25	; 37
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18
	
	DDRC = 0xFF;	//Configure port C as INPUT
 13e:	87 e2       	ldi	r24, 0x27	; 39
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	2f ef       	ldi	r18, 0xFF	; 255
 144:	fc 01       	movw	r30, r24
 146:	20 83       	st	Z, r18
	PORTC = 0xFF;	//Configure port C as PULLUP
 148:	88 e2       	ldi	r24, 0x28	; 40
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	2f ef       	ldi	r18, 0xFF	; 255
 14e:	fc 01       	movw	r30, r24
 150:	20 83       	st	Z, r18
	
	DDRD = 0xFF;	//Configure port D as OUTPUT
 152:	8a e2       	ldi	r24, 0x2A	; 42
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	2f ef       	ldi	r18, 0xFF	; 255
 158:	fc 01       	movw	r30, r24
 15a:	20 83       	st	Z, r18
	PORTD = 0xFF;	//Configure port D as LOW
 15c:	8b e2       	ldi	r24, 0x2B	; 43
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	2f ef       	ldi	r18, 0xFF	; 255
 162:	fc 01       	movw	r30, r24
 164:	20 83       	st	Z, r18
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <init_timer0>:

void init_timer0(void)
{
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	cd b7       	in	r28, 0x3d	; 61
 172:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0;		//Initialize TCNT0 to 0
 174:	86 e4       	ldi	r24, 0x46	; 70
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	fc 01       	movw	r30, r24
 17a:	10 82       	st	Z, r1
	OCR0A = 131;	//Set OCR to count to 131
 17c:	87 e4       	ldi	r24, 0x47	; 71
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	23 e8       	ldi	r18, 0x83	; 131
 182:	fc 01       	movw	r30, r24
 184:	20 83       	st	Z, r18
	TCCR0A = 0x00;	//No PWM in normal mode
 186:	84 e4       	ldi	r24, 0x44	; 68
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	fc 01       	movw	r30, r24
 18c:	10 82       	st	Z, r1
	TCCR0B = 0x00;	//Set timer off
 18e:	85 e4       	ldi	r24, 0x45	; 69
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	fc 01       	movw	r30, r24
 194:	10 82       	st	Z, r1
}
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <delay>:

void delay(int time)
{
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	00 d0       	rcall	.+0      	; 0x1a2 <delay+0x6>
 1a2:	1f 92       	push	r1
 1a4:	cd b7       	in	r28, 0x3d	; 61
 1a6:	de b7       	in	r29, 0x3e	; 62
 1a8:	9c 83       	std	Y+4, r25	; 0x04
 1aa:	8b 83       	std	Y+3, r24	; 0x03
	for (int i=0; i < time; i++)
 1ac:	1a 82       	std	Y+2, r1	; 0x02
 1ae:	19 82       	std	Y+1, r1	; 0x01
 1b0:	22 c0       	rjmp	.+68     	; 0x1f6 <delay+0x5a>
	{
		TCCR0B = 0x02;						//Start timer with x8 prescaler
 1b2:	85 e4       	ldi	r24, 0x45	; 69
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	22 e0       	ldi	r18, 0x02	; 2
 1b8:	fc 01       	movw	r30, r24
 1ba:	20 83       	st	Z, r18
		while ((TIFR0 & (1<<OCF0A)) == 0);	//Wait for compare condition
 1bc:	00 00       	nop
 1be:	85 e3       	ldi	r24, 0x35	; 53
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	fc 01       	movw	r30, r24
 1c4:	80 81       	ld	r24, Z
 1c6:	88 2f       	mov	r24, r24
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	82 70       	andi	r24, 0x02	; 2
 1cc:	99 27       	eor	r25, r25
 1ce:	00 97       	sbiw	r24, 0x00	; 0
 1d0:	b1 f3       	breq	.-20     	; 0x1be <delay+0x22>
		TIFR0 = TIFR0 | (1<<OCF0A);			//Clear overflow flag
 1d2:	85 e3       	ldi	r24, 0x35	; 53
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	25 e3       	ldi	r18, 0x35	; 53
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	f9 01       	movw	r30, r18
 1dc:	20 81       	ld	r18, Z
 1de:	22 60       	ori	r18, 0x02	; 2
 1e0:	fc 01       	movw	r30, r24
 1e2:	20 83       	st	Z, r18
		TCNT0 = 0x00;						//Set counter to 0 
 1e4:	86 e4       	ldi	r24, 0x46	; 70
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	fc 01       	movw	r30, r24
 1ea:	10 82       	st	Z, r1
	TCCR0B = 0x00;	//Set timer off
}

void delay(int time)
{
	for (int i=0; i < time; i++)
 1ec:	89 81       	ldd	r24, Y+1	; 0x01
 1ee:	9a 81       	ldd	r25, Y+2	; 0x02
 1f0:	01 96       	adiw	r24, 0x01	; 1
 1f2:	9a 83       	std	Y+2, r25	; 0x02
 1f4:	89 83       	std	Y+1, r24	; 0x01
 1f6:	29 81       	ldd	r18, Y+1	; 0x01
 1f8:	3a 81       	ldd	r19, Y+2	; 0x02
 1fa:	8b 81       	ldd	r24, Y+3	; 0x03
 1fc:	9c 81       	ldd	r25, Y+4	; 0x04
 1fe:	28 17       	cp	r18, r24
 200:	39 07       	cpc	r19, r25
 202:	bc f2       	brlt	.-82     	; 0x1b2 <delay+0x16>
		while ((TIFR0 & (1<<OCF0A)) == 0);	//Wait for compare condition
		TIFR0 = TIFR0 | (1<<OCF0A);			//Clear overflow flag
		TCNT0 = 0x00;						//Set counter to 0 
	}
	
	TCCR0B = 0x00;						//Stop timer
 204:	85 e4       	ldi	r24, 0x45	; 69
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	fc 01       	movw	r30, r24
 20a:	10 82       	st	Z, r1
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
 210:	0f 90       	pop	r0
 212:	0f 90       	pop	r0
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <_exit>:
 21a:	f8 94       	cli

0000021c <__stop_program>:
 21c:	ff cf       	rjmp	.-2      	; 0x21c <__stop_program>
